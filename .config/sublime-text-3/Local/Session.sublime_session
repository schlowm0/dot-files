{
	"folder_history":
	[
		"/home/moritz/Repositories/snn_object_tracking",
		"/home/moritz/Repositories/NCSRobotLib",
		"/home/moritz/Repositories/nstbot",
		"/home/moritz/Repositories/snn_object_recognition"
	],
	"last_version": 3207,
	"last_window_id": 96,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 1454.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"targ",
						"target_N"
					],
					[
						"raster",
						"rasterPlot_c"
					],
					[
						"eq",
						"eq_dict"
					],
					[
						"dic",
						"dict_name"
					],
					[
						"num_inputs",
						"num_inputs=2"
					],
					[
						"dir",
						"directory_name"
					],
					[
						"sourc",
						"source_path"
					],
					[
						"Ie_",
						"Ie_th\t(DPIstdp.py)"
					],
					[
						"Ii_tau",
						"Ii_tau*(Ii_syn\t(DPIstdp_gm.py)"
					],
					[
						"Itau",
						"Itau_i\t(DPIstdp_gm.py)"
					],
					[
						"decay",
						"decay_time\tparam"
					],
					[
						"learn",
						"learning_rate"
					],
					[
						"run",
						"run_regularly"
					],
					[
						"syn",
						"synapse_types"
					],
					[
						"SLOW",
						"SLOW_INH"
					],
					[
						"synap",
						"synapse_type"
					],
					[
						"post",
						"post_neurons"
					],
					[
						"core",
						"core_offset"
					],
					[
						"feature",
						"feature_neuron"
					],
					[
						"qu",
						"quantize_weights_number\tfunction"
					],
					[
						"qunatiz",
						"quantized_weights"
					],
					[
						"synapse",
						"synapse_types"
					],
					[
						"weights_",
						"weights_inp"
					],
					[
						"data",
						"data_dir"
					],
					[
						"rot",
						"rotating_bar\t(testbench.py)"
					],
					[
						"OCTA",
						"OCTA_Testbench\tmodule"
					],
					[
						"OCT",
						"OCTA_Testbench\t(testbench.py)"
					],
					[
						"activ",
						"activity_proxy"
					],
					[
						"check",
						"check_units"
					],
					[
						"exp",
						"exp_weighted_membrane_buffer"
					],
					[
						"disit",
						"distribution"
					],
					[
						"wei",
						"weight_update"
					],
					[
						"membran",
						"membrane_buffer"
					],
					[
						"Ipred",
						"Ipred_syn"
					],
					[
						"norma",
						"normalized_Imem_var"
					],
					[
						"Imem",
						"Imem_var"
					],
					[
						"high",
						"high_indices"
					],
					[
						"qua",
						"quantized_weights"
					],
					[
						"thre",
						"threshold_high"
					],
					[
						"thres",
						"threshold_high"
					],
					[
						"dec",
						"declare_types\tfunction"
					],
					[
						"inh",
						"inh_wta_c"
					],
					[
						"qunati",
						"quantize_weights\tmodule"
					],
					[
						"quna",
						"quantize_weights\tmodule"
					],
					[
						"testbench",
						"testbench_stim"
					],
					[
						"DPIst",
						"DPIstdp_gm"
					],
					[
						"Synapse",
						"SynapseEquationBuilder.import_eq('octa\t(run_reg_functions.py)"
					],
					[
						"SynST",
						"SynSTDGM"
					],
					[
						"synaps",
						"synapse_group"
					],
					[
						"logi",
						"logical_or\tinstance"
					],
					[
						"calac",
						"calculate_distance"
					],
					[
						"buffer",
						"buffer_size"
					],
					[
						"clacl",
						"calculate_mean\tfunction"
					],
					[
						"cal",
						"calculate_mean\tfunction"
					],
					[
						"clac",
						"calculate_mean"
					],
					[
						"Vect",
						"Vector3D"
					],
					[
						"Vec",
						"Vector3D\tclass"
					],
					[
						"_g",
						"_get_length\tfunction"
					],
					[
						"my_ve",
						"my_vec2"
					],
					[
						"my",
						"my_duck_1\tstatement"
					],
					[
						"he",
						"head_color\tstatement"
					],
					[
						"my_de",
						"my_dec_duck\tstatement"
					],
					[
						"red",
						"red_head_3\tstatement"
					],
					[
						"blac",
						"black_duck"
					],
					[
						"Dec",
						"DecoyDuck\tclass"
					],
					[
						"fl",
						"flying_behaviour\tstatement"
					],
					[
						"None",
						"NonFlyingBehaviour"
					],
					[
						"Fly",
						"FlyinBehaviour\tclass"
					],
					[
						"RedHe",
						"ReadHeadDuck\tclass"
					],
					[
						"neuron_m",
						"neuron_models"
					],
					[
						"pytho",
						"python3"
					],
					[
						"equation",
						"equation_builder"
					],
					[
						"pop",
						"popitem\tfunction"
					],
					[
						"file",
						"filename"
					],
					[
						"import",
						"importlib"
					],
					[
						"neuro",
						"neuron_eq"
					],
					[
						"Nac",
						"NCSBrian2Lib"
					],
					[
						"NCS",
						"NCSBrian2Lib"
					],
					[
						"standal",
						"standaloneParams"
					],
					[
						"Build",
						"BuildingBlock\tclass"
					],
					[
						"visu",
						"visualization_backend"
					],
					[
						"equat",
						"equation_builder\t(wta.py)"
					],
					[
						"names",
						"namespace"
					],
					[
						"name",
						"_name\tstatement"
					],
					[
						"on",
						"on_post\tstatement"
					],
					[
						"on_",
						"on_pre\tstatement"
					],
					[
						"equa",
						"equation_builder\tparam"
					],
					[
						"noi",
						"noise_x\tstatement"
					],
					[
						"list",
						"list_of_coord"
					],
					[
						"noise",
						"noise_y"
					],
					[
						"repeti",
						"repetition_offset"
					],
					[
						"nois",
						"noise_y"
					],
					[
						"rep",
						"repetition"
					],
					[
						"n2",
						"n2dNeurons"
					],
					[
						"rand",
						"randint\tfunction"
					],
					[
						"adjace",
						"adjacency_matrix\tstatement"
					],
					[
						"start",
						"start_time"
					],
					[
						"intern",
						"interneurons"
					],
					[
						"itern",
						"interneurons"
					],
					[
						"dpi_neur",
						"dpi_neuron_eq"
					],
					[
						"reser",
						"reservor_network\tstatement"
					],
					[
						"recurr",
						"recurrent_exc_connection"
					],
					[
						"reservo",
						"reservoir"
					],
					[
						"reserv",
						"reservoir"
					],
					[
						"bias",
						"bias_directory"
					],
					[
						"plotter",
						"plotter2d\tmodule"
					],
					[
						"Conne",
						"Connections\tclass"
					],
					[
						"NC",
						"NCSBrian2Lib\t(octa.py)"
					],
					[
						"tau",
						"tau_var"
					],
					[
						"testN",
						"testNeu"
					],
					[
						"num_inh_",
						"num_inh_inputs"
					],
					[
						"synIn",
						"synInhInh1i"
					],
					[
						"wta",
						"wtaParams"
					],
					[
						"DPI",
						"DPIstdp\tclass"
					],
					[
						"statem",
						"statemon_weight"
					],
					[
						"spikem",
						"spikemon_input"
					],
					[
						"State",
						"StateMonitor"
					],
					[
						"ran",
						"randint\tfunction"
					],
					[
						"compres",
						"compressionMap"
					],
					[
						"next",
						"nextRow\t(neuron_synapse.py)"
					],
					[
						"plot_t",
						"plot_statemon_qt"
					],
					[
						"spikemonW",
						"spikemonWTAInp"
					],
					[
						"WTA",
						"WTAMonitors"
					],
					[
						"end",
						"end_time"
					],
					[
						"start_",
						"start_ind"
					],
					[
						"m",
						"monitor"
					],
					[
						"star",
						"start_time"
					],
					[
						"symb",
						"symbolBrush\t(neuron_synapse.py)"
					]
				]
			},
			"build_system_choices":
			[
				[
					[
						[
							"Anaconda Python Builder",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Markdown Preview/Markdown.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						]
					],
					[
						"Packages/Markdown Preview/Markdown.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						],
						[
							"Packages/User/python3.sublime-build",
							""
						]
					],
					[
						"Packages/User/python3.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							""
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Traditional"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"PdfLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"XeLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"LuaLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Basic Builder"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Basic Builder - PdfLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Basic Builder - XeLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Basic Builder - LuaLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Script Builder"
						]
					],
					[
						"Packages/LaTeXTools/LaTeX.sublime-build",
						"PdfLaTeX"
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 168.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"packag",
						"Package Control: Install Package"
					],
					[
						"update",
						"Package Control: Upgrade/Overwrite All Packages"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						"pascl",
						"Package Control: Install Package"
					]
				],
				"width": 1086.0
			},
			"console":
			{
				"height": 226.0,
				"history":
				[
					"echo LOOL",
					"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/schlowmo/ownCloud/Documents/configs/vs_code_setup.txt",
				"/home/schlowmo/ownCloud/Documents/Studies/PostDoc/Application/PostDoc/Webpage questions.txt",
				"/home/schlowmo/Repositories/ADaPTION/Makefile.config",
				"/home/schlowmo/.local/share/applications/pycharm.desktop",
				"/home/schlowmo/ownCloud/Documents/Studies/PhD/Capo Caccia/2019/registration_opens_mail.txt",
				"/home/schlowmo/ownCloud/Documents/Studies/PhD/Capo Caccia/2019/mission_statement.txt",
				"/home/schlowmo/ownCloud/Documents/Studies/PhD/Capo Caccia/2019/invitation_email.txt",
				"/home/schlowmo/ownCloud/Documents/Studies/PhD/Talks/Labmeeting/12.12.2018/announcement.txt",
				"/home/schlowmo/Repositories/teili/examples/stdp_kernel_test.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPIvdp.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPI_gm.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPIstdp_gm.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/SynSTDGM.py",
				"/home/schlowmo/Repositories/teili/teili/models/equations/DPIstdp.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPIvar.py",
				"/home/schlowmo/Repositories/teili/teili/tools/plotter2d.py",
				"/home/schlowmo/Repositories/teili/teili/tools/plotting.py",
				"/home/schlowmo/Repositories/OCTA/octa/tools/run_reg_functions.py",
				"/home/schlowmo/Repositories/OCTA/octa/tools/add_run_reg.py",
				"/home/schlowmo/Repositories/OCTA/octa/tools/add_mismatch.py",
				"/home/schlowmo/Repositories/teili/teili/tools/sorting.py",
				"/home/schlowmo/Repositories/OCTA/octa/tools/weight_init.py",
				"/home/schlowmo/ownCloud/Documents/Studies/PostDoc/Application/PostDoc/Job announcement.txt",
				"/home/schlowmo/Documents/OCTA/Thesis/test_plot.py",
				"/home/schlowmo/Repositories/teili/teili/stimuli/testbench.py",
				"/home/schlowmo/Repositories/teili/setup.py",
				"/home/schlowmo/Repositories/teili/examples/neuron_synapse_builderobj_test.py",
				"/home/schlowmo/Repositories/teili/teili/models/builder/neuron_equation_builder.py",
				"/home/schlowmo/Repositories/teili/docs/scripts/Getting started.md",
				"/home/schlowmo/Repositories/teili/teili/models/builder/synapse_equation_builder.py",
				"/home/schlowmo/Repositories/teili/teili/models/neuron_models.py",
				"/home/schlowmo/Repositories/teili/README.md",
				"/home/schlowmo/Repositories/teili/examples/neuron_synapse_test.py",
				"/home/schlowmo/Repositories/teili/teili/models/synapse_models.py",
				"/home/schlowmo/Repositories/teili/teili/__init__.py",
				"/home/schlowmo/Repositories/teili/teili/building_blocks/building_block.py",
				"/home/schlowmo/Repositories/teili/teili/building_blocks/wta.py",
				"/home/schlowmo/Repositories/teili/teili/building_blocks/reservoir.py",
				"/home/schlowmo/Repositories/teili/docs/scripts/Tutorials.md",
				"/home/schlowmo/Repositories/teili/docs/scripts/Core.md",
				"/home/schlowmo/Repositories/teili/teili/models/equations/DPI.py",
				"/home/schlowmo/Repositories/teili/examples/mismatch_example.py",
				"/home/schlowmo/.bashrc",
				"/home/schlowmo/Repositories/OCTA/octa/interfaces/ctxctl_SSV.py",
				"/home/schlowmo/Repositories/teili/teili/models/equations/DPISyn.py",
				"/home/schlowmo/Repositories/teili/teili/models/builder/templates/synapse_templates.py",
				"/home/schlowmo/Repositories/OCTA/octa/tools/old_code.py",
				"/home/schlowmo/Repositories/cortexcontrol/NeuronNeuronConnector.py",
				"/home/schlowmo/Repositories/cortexcontrol/PyCtxUtils.py",
				"/home/schlowmo/Repositories/teili/examples/stdp_test.py",
				"/home/schlowmo/Repositories/teili/teili/models/builder/templates/neuron_templates.py",
				"/home/schlowmo/Repositories/OCTA/octa/interfaces/lock_and_load.py",
				"/home/schlowmo/Repositories/OCTA/octa/dynap_octa.py",
				"/home/schlowmo/Repositories/teili/teili/tools/indexing.py",
				"/home/schlowmo/Repositories/teili/teili/tools/converter.py",
				"/home/schlowmo/Repositories/teili/teili/core/groups.py",
				"/home/schlowmo/Repositories/teili/teili/tools/quantize_weights.py",
				"/home/schlowmo/Repositories/teili/teili/tools/random_sampling.py",
				"/home/schlowmo/Repositories/teili/teili/tools/distance.py",
				"/home/schlowmo/Repositories/teili/teili/tools/synaptic_kernel.py",
				"/home/schlowmo/Repositories/cortexcontrol/octa.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPI_at.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPI.py",
				"/home/schlowmo/Repositories/teili/teili/models/parameters/dpi_neuron_param.py",
				"/home/schlowmo/Repositories/OCTA/examples/stdgm_kernel_test.py",
				"/home/schlowmo/Repositories/teili/teili/tools/stimulus_generators.py",
				"/home/schlowmo/Repositories/teili/teili/tools/misc.py",
				"/home/schlowmo/Repositories/OCTA/neuron_equation_builder.py",
				"/home/schlowmo/.bash_aliases",
				"/home/schlowmo/Repositories/cortexcontrol/ctxctl_SSV.py",
				"/home/schlowmo/ownCloud/Documents/Studies/PostDoc/Application/October/Morit_Milde_Purpose_description.tex",
				"/home/schlowmo/ownCloud/Documents/Studies/ToDo/ToDo.md",
				"/home/schlowmo/Repositories/OCTA/examples/stdgm_test.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPISyn_gm.py",
				"/home/schlowmo/.local/lib/python3.5/site-packages/teili-0.2-py3.5.egg/teili/core/groups.py",
				"/home/schlowmo/Repositories/teili/teili/models/equations/DoubleExponential.py",
				"/home/schlowmo/Downloads/lol.py",
				"/home/schlowmo/Repositories/teili/tests/test_testbench.py",
				"/home/schlowmo/Repositories/teili/tests/test_groups.py",
				"/home/schlowmo/Repositories/teili/tests/test_wta.py",
				"/home/schlowmo/Repositories/teili/tests/test_equations_long.py",
				"/usr/local/lib/python3.5/dist-packages/pyqtgraph/__init__.py",
				"/home/schlowmo/Repositories/teili/unit_tests/test_equations_long.py",
				"/home/schlowmo/Repositories/teili/tests/test_equations.py",
				"/home/schlowmo/Repositories/teili/tests/test_tools.py",
				"/home/schlowmo/Repositories/teili/.git/hooks/pre-push",
				"/home/schlowmo/Repositories/OCTA/octa/tools/weight_matrix_visualization.py",
				"/home/schlowmo/Repositories/teili/examples/neuron_synapse_subgroup_test.py",
				"/home/schlowmo/Repositories/ncs_brian/equations/dpi_syn_eq.py",
				"/home/schlowmo/Repositories/ncs_brian/equations/dpi_shunt_syn_eq.py",
				"/home/schlowmo/Repositories/OCTA/octa.py",
				"/home/schlowmo/Repositories/OCTA/setup.py",
				"/home/schlowmo/Repositories/ncs_brian/equations/dpi_neuron_eq.py",
				"/home/schlowmo/Repositories/ncs_brian/equations/dpi_lin_syn_eq.py",
				"/home/schlowmo/Repositories/ncs_brian/equations/dynapse_eq.py",
				"/home/schlowmo/Repositories/ncs_brian/linneuron_eq.py",
				"/home/schlowmo/Documents/spp/tests.py",
				"/home/schlowmo/Documents/spp.py",
				"/home/schlowmo/Documents/spp/vector.py",
				"/home/schlowmo/Documents/spp/starbuzz.py",
				"/home/schlowmo/Documents/spp/kmeans.py",
				"/home/schlowmo/Repositories/dot-files/install_packages.sh",
				"/home/schlowmo/Repositories/teili/docs/scripts/Equation builder.md",
				"/home/schlowmo/Repositories/teili/docs/scripts/Building Blocks.md",
				"/home/schlowmo/Repositories/teili/docs/conf.py",
				"/home/schlowmo/Repositories/teili/requirements.txt",
				"/home/schlowmo/Repositories/teili/tools/sorting.py",
				"/home/schlowmo/Repositories/teili/tools/converter.py",
				"/home/schlowmo/Repositories/teili/tools/distance.py",
				"/home/schlowmo/Repositories/teili/building_blocks/wta.py",
				"/home/schlowmo/Repositories/teili/core/groups.py",
				"/home/schlowmo/Repositories/teili/stimuli/testbench.py",
				"/home/schlowmo/Repositories/teili/tools/math_functions.py",
				"/home/schlowmo/Repositories/teili/docs/modules/modules.rst",
				"/home/schlowmo/Repositories/teili/docs/index.rst",
				"/home/schlowmo/Repositories/OCTA/README.md",
				"/home/schlowmo/Repositories/teili/models/builder/combine.py",
				"/home/schlowmo/Repositories/teili/examples/STDP_IE.png",
				"/home/schlowmo/Repositories/teili/models/builder/synapse_equation_builder.py",
				"/home/schlowmo/Repositories/teili/models/synapse_models.py",
				"/home/schlowmo/Repositories/teili/models/neuron_models.py",
				"/home/schlowmo/Repositories/teili/models/builder/neuron_equation_builder.py",
				"/home/schlowmo/Repositories/pyaer/scripts/davis240_test.py",
				"/home/schlowmo/Repositories/NCSBrian2Lib/tools/davis_interface.py",
				"/home/schlowmo/Repositories/teili/tools/indexing.py",
				"/home/schlowmo/Repositories/NCSBrian2Lib/building_blocks/semd.py",
				"/home/schlowmo/Repositories/NCSBrian2Lib/unit_tests/test_tools.py",
				"/home/schlowmo/Repositories/NCSBrian2Lib/building_blocks/wta.py"
			],
			"find":
			{
				"height": 63.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"CtxDynapse",
					"FpgaSpikeEvent",
					"buffer_pointer",
					"Iahpmax",
					"w_plast",
					"self.parameters",
					"Ipred_plast",
					"w_plast",
					"Ipred",
					"w_plast",
					"Ipred_pre",
					"    >>> neuron_obj",
					"    >>> syn_obj",
					"w_mean",
					"w_std",
					"reinit_threshold",
					"w_std_re_init",
					"w_std_init",
					"w_std",
					"syn_obj",
					"n2dNeurons",
					"ncols",
					"ind2xy",
					"wPlast",
					"get",
					"p_InhWTA",
					"p_WTAInh",
					"I_connection_probability",
					"layerSize",
					"predictionUnits",
					"errorStyle",
					"tileID",
					"contextFanIn",
					"totalNumberTiles",
					"tileNumberY",
					"tileNumberX",
					"tileSizeY",
					"tileSizeX",
					"strideSizeX",
					"strideSizeY",
					"strideSizeX",
					"win",
					"Description",
					"component",
					"namespace"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 63.0
			},
			"input":
			{
				"height": 74.0
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 376.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.latextools":
			{
				"height": 250.0
			},
			"output.markdown":
			{
				"height": 170.0
			},
			"output.unsaved_changes":
			{
				"height": 170.0
			},
			"output.vi_out":
			{
				"height": 96.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 118.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 380.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"",
						"mon_addr"
					]
				],
				"width": 392.0
			},
			"show_minimap": false,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": false,
			"side_bar_width": 191.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 980.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"deca",
						"decay_strategy\tabc"
					],
					[
						"const",
						"constants"
					],
					[
						"targ",
						"target_N"
					],
					[
						"raster",
						"rasterPlot_c"
					],
					[
						"eq",
						"eq_dict"
					],
					[
						"dic",
						"dict_name"
					],
					[
						"num_inputs",
						"num_inputs=2"
					],
					[
						"dir",
						"directory_name"
					],
					[
						"sourc",
						"source_path"
					],
					[
						"Ie_",
						"Ie_th\t(DPIstdp.py)"
					],
					[
						"Ii_tau",
						"Ii_tau*(Ii_syn\t(DPIstdp_gm.py)"
					],
					[
						"Itau",
						"Itau_i\t(DPIstdp_gm.py)"
					],
					[
						"decay",
						"decay_time\tparam"
					],
					[
						"learn",
						"learning_rate"
					],
					[
						"run",
						"run_regularly"
					],
					[
						"syn",
						"synapse_types"
					],
					[
						"SLOW",
						"SLOW_INH"
					],
					[
						"synap",
						"synapse_type"
					],
					[
						"post",
						"post_neurons"
					],
					[
						"core",
						"core_offset"
					],
					[
						"feature",
						"feature_neuron"
					],
					[
						"qu",
						"quantize_weights_number\tfunction"
					],
					[
						"qunatiz",
						"quantized_weights"
					],
					[
						"synapse",
						"synapse_types"
					],
					[
						"weights_",
						"weights_inp"
					],
					[
						"data",
						"data_dir"
					],
					[
						"rot",
						"rotating_bar\t(testbench.py)"
					],
					[
						"OCTA",
						"OCTA_Testbench\tmodule"
					],
					[
						"OCT",
						"OCTA_Testbench\t(testbench.py)"
					],
					[
						"activ",
						"activity_proxy"
					],
					[
						"check",
						"check_units"
					],
					[
						"exp",
						"exp_weighted_membrane_buffer"
					],
					[
						"disit",
						"distribution"
					],
					[
						"wei",
						"weight_update"
					],
					[
						"membran",
						"membrane_buffer"
					],
					[
						"Ipred",
						"Ipred_syn"
					],
					[
						"norma",
						"normalized_Imem_var"
					],
					[
						"Imem",
						"Imem_var"
					],
					[
						"high",
						"high_indices"
					],
					[
						"qua",
						"quantized_weights"
					],
					[
						"thre",
						"threshold_high"
					],
					[
						"thres",
						"threshold_high"
					],
					[
						"dec",
						"declare_types\tfunction"
					],
					[
						"inh",
						"inh_wta_c"
					],
					[
						"qunati",
						"quantize_weights\tmodule"
					],
					[
						"quna",
						"quantize_weights\tmodule"
					],
					[
						"testbench",
						"testbench_stim"
					],
					[
						"DPIst",
						"DPIstdp_gm"
					],
					[
						"Synapse",
						"SynapseEquationBuilder.import_eq('octa\t(run_reg_functions.py)"
					],
					[
						"SynST",
						"SynSTDGM"
					],
					[
						"synaps",
						"synapse_group"
					],
					[
						"logi",
						"logical_or\tinstance"
					],
					[
						"calac",
						"calculate_distance"
					],
					[
						"buffer",
						"buffer_size"
					],
					[
						"clacl",
						"calculate_mean\tfunction"
					],
					[
						"cal",
						"calculate_mean\tfunction"
					],
					[
						"clac",
						"calculate_mean"
					],
					[
						"Vect",
						"Vector3D"
					],
					[
						"Vec",
						"Vector3D\tclass"
					],
					[
						"_g",
						"_get_length\tfunction"
					],
					[
						"my_ve",
						"my_vec2"
					],
					[
						"my",
						"my_duck_1\tstatement"
					],
					[
						"he",
						"head_color\tstatement"
					],
					[
						"my_de",
						"my_dec_duck\tstatement"
					],
					[
						"red",
						"red_head_3\tstatement"
					],
					[
						"blac",
						"black_duck"
					],
					[
						"Dec",
						"DecoyDuck\tclass"
					],
					[
						"fl",
						"flying_behaviour\tstatement"
					],
					[
						"None",
						"NonFlyingBehaviour"
					],
					[
						"Fly",
						"FlyinBehaviour\tclass"
					],
					[
						"RedHe",
						"ReadHeadDuck\tclass"
					],
					[
						"neuron_m",
						"neuron_models"
					],
					[
						"pytho",
						"python3"
					],
					[
						"equation",
						"equation_builder"
					],
					[
						"pop",
						"popitem\tfunction"
					],
					[
						"file",
						"filename"
					],
					[
						"import",
						"importlib"
					],
					[
						"neuro",
						"neuron_eq"
					],
					[
						"Nac",
						"NCSBrian2Lib"
					],
					[
						"NCS",
						"NCSBrian2Lib"
					],
					[
						"standal",
						"standaloneParams"
					],
					[
						"Build",
						"BuildingBlock\tclass"
					],
					[
						"visu",
						"visualization_backend"
					],
					[
						"equat",
						"equation_builder\t(wta.py)"
					],
					[
						"names",
						"namespace"
					],
					[
						"name",
						"_name\tstatement"
					],
					[
						"on",
						"on_post\tstatement"
					],
					[
						"on_",
						"on_pre\tstatement"
					],
					[
						"equa",
						"equation_builder\tparam"
					],
					[
						"noi",
						"noise_x\tstatement"
					],
					[
						"list",
						"list_of_coord"
					],
					[
						"noise",
						"noise_y"
					],
					[
						"repeti",
						"repetition_offset"
					],
					[
						"nois",
						"noise_y"
					],
					[
						"rep",
						"repetition"
					],
					[
						"n2",
						"n2dNeurons"
					],
					[
						"rand",
						"randint\tfunction"
					],
					[
						"adjace",
						"adjacency_matrix\tstatement"
					],
					[
						"start",
						"start_time"
					],
					[
						"intern",
						"interneurons"
					],
					[
						"itern",
						"interneurons"
					],
					[
						"dpi_neur",
						"dpi_neuron_eq"
					],
					[
						"reser",
						"reservor_network\tstatement"
					],
					[
						"recurr",
						"recurrent_exc_connection"
					],
					[
						"reservo",
						"reservoir"
					],
					[
						"reserv",
						"reservoir"
					],
					[
						"bias",
						"bias_directory"
					],
					[
						"plotter",
						"plotter2d\tmodule"
					],
					[
						"Conne",
						"Connections\tclass"
					],
					[
						"NC",
						"NCSBrian2Lib\t(octa.py)"
					],
					[
						"tau",
						"tau_var"
					],
					[
						"testN",
						"testNeu"
					],
					[
						"num_inh_",
						"num_inh_inputs"
					],
					[
						"synIn",
						"synInhInh1i"
					],
					[
						"wta",
						"wtaParams"
					],
					[
						"DPI",
						"DPIstdp\tclass"
					],
					[
						"statem",
						"statemon_weight"
					],
					[
						"spikem",
						"spikemon_input"
					],
					[
						"State",
						"StateMonitor"
					],
					[
						"ran",
						"randint\tfunction"
					],
					[
						"compres",
						"compressionMap"
					],
					[
						"next",
						"nextRow\t(neuron_synapse.py)"
					],
					[
						"plot_t",
						"plot_statemon_qt"
					],
					[
						"spikemonW",
						"spikemonWTAInp"
					],
					[
						"WTA",
						"WTAMonitors"
					],
					[
						"end",
						"end_time"
					],
					[
						"start_",
						"start_ind"
					],
					[
						"m",
						"monitor"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/home/schlowmo/ownCloud/Documents/General/Mobility/cancellation.tex",
					"settings":
					{
						"buffer_size": 1627,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/schlowmo/Documents/test_scripts/ORCA Compiler.py",
					"settings":
					{
						"buffer_size": 8135,
						"encoding": "UTF-8",
						"line_ending": "Unix",
						"name": "import os, time"
					}
				}
			],
			"build_system": "Packages/LaTeXTools/LaTeX.sublime-build",
			"build_system_choices":
			[
				[
					[
						[
							"Anaconda Python Builder",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Markdown Preview/Markdown.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						]
					],
					[
						"Packages/Markdown Preview/Markdown.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						],
						[
							"Packages/User/python3.sublime-build",
							""
						]
					],
					[
						"Packages/User/python3.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							""
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (All)"
						],
						[
							"Packages/Vintageous/Vintageous.sublime-build",
							"Vintageous - Test (This File Only)"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							""
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Traditional"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"PdfLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"XeLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"LuaLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Basic Builder"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Basic Builder - PdfLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Basic Builder - XeLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Basic Builder - LuaLaTeX"
						],
						[
							"Packages/LaTeXTools/LaTeX.sublime-build",
							"Script Builder"
						]
					],
					[
						"Packages/LaTeXTools/LaTeX.sublime-build",
						"PdfLaTeX"
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 168.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"packag",
						"Package Control: Install Package"
					],
					[
						"update",
						"Package Control: Upgrade/Overwrite All Packages"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						"pascl",
						"Package Control: Install Package"
					]
				],
				"width": 1086.0
			},
			"console":
			{
				"height": 226.0,
				"history":
				[
					"echo LOOL",
					"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/schlowmo/Repositories/teili/teili/core/tags.py",
				"/home/schlowmo/Repositories/teili/teili/building_blocks/wta.py",
				"/home/schlowmo/Repositories/Phd_Project/Thesis/spike_based_computation.tex",
				"/home/schlowmo/Repositories/Phd_Project/Thesis/jb-thesis.cls",
				"/home/schlowmo/Repositories/Phd_Project/Thesis/chapters/octa.tex",
				"/home/schlowmo/Repositories/teili/teili/building_blocks/octa.py",
				"/home/schlowmo/Repositories/teili/teili/tools/run_regularly/add_run_reg.py",
				"/home/schlowmo/Repositories/teili/teili/tools/run_regularly/run_reg_functions.py",
				"/home/schlowmo/Repositories/teili/teili/models/parameters/octa_params.py",
				"/home/schlowmo/Repositories/teili/teili/tools/octa_tools.py",
				"/home/schlowmo/ownCloud/Documents/Studies/PostDoc/Application/Visa/english_confirmation/absender.lco",
				"/home/schlowmo/ownCloud/Documents/Studies/PostDoc/Application/Visa/english_confirmation/english_skill_confirmation.tex",
				"/home/schlowmo/Repositories/Phd_Project/Thesis/biblio/biblioncs.bib",
				"/home/schlowmo/.bash_profile",
				"/home/schlowmo/Repositories/GeNN/userproject/PoissonIzh_project/README.txt",
				"/home/schlowmo/Repositories/GeNN/README.txt",
				"/home/schlowmo/Downloads/Miniconda3-latest-Linux-x86_64.sh",
				"/home/schlowmo/Repositories/teili/teili/models/builder/templates/neuron_templates.py",
				"/home/schlowmo/Repositories/teili/teili/building_blocks/building_block.py",
				"/home/schlowmo/ownCloud/Documents/Studies/ToDo/ToDo.md",
				"/home/schlowmo/ownCloud/Documents/configs/vs_code_setup.txt",
				"/home/schlowmo/ownCloud/Documents/Studies/PostDoc/Application/PostDoc/Webpage questions.txt",
				"/home/schlowmo/Repositories/ADaPTION/Makefile.config",
				"/home/schlowmo/.local/share/applications/pycharm.desktop",
				"/home/schlowmo/ownCloud/Documents/Studies/PhD/Capo Caccia/2019/registration_opens_mail.txt",
				"/home/schlowmo/ownCloud/Documents/Studies/PhD/Capo Caccia/2019/mission_statement.txt",
				"/home/schlowmo/ownCloud/Documents/Studies/PhD/Capo Caccia/2019/invitation_email.txt",
				"/home/schlowmo/ownCloud/Documents/Studies/PhD/Talks/Labmeeting/12.12.2018/announcement.txt",
				"/home/schlowmo/Repositories/teili/examples/stdp_kernel_test.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPIvdp.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPI_gm.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPIstdp_gm.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/SynSTDGM.py",
				"/home/schlowmo/Repositories/teili/teili/models/equations/DPIstdp.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPIvar.py",
				"/home/schlowmo/Repositories/teili/teili/tools/plotter2d.py",
				"/home/schlowmo/Repositories/teili/teili/tools/plotting.py",
				"/home/schlowmo/Repositories/OCTA/octa/tools/run_reg_functions.py",
				"/home/schlowmo/Repositories/OCTA/octa/tools/add_run_reg.py",
				"/home/schlowmo/Repositories/OCTA/octa/tools/add_mismatch.py",
				"/home/schlowmo/Repositories/teili/teili/tools/sorting.py",
				"/home/schlowmo/Repositories/OCTA/octa/tools/weight_init.py",
				"/home/schlowmo/ownCloud/Documents/Studies/PostDoc/Application/PostDoc/Job announcement.txt",
				"/home/schlowmo/Documents/OCTA/Thesis/test_plot.py",
				"/home/schlowmo/Repositories/teili/teili/stimuli/testbench.py",
				"/home/schlowmo/Repositories/teili/setup.py",
				"/home/schlowmo/Repositories/teili/examples/neuron_synapse_builderobj_test.py",
				"/home/schlowmo/Repositories/teili/teili/models/builder/neuron_equation_builder.py",
				"/home/schlowmo/Repositories/teili/docs/scripts/Getting started.md",
				"/home/schlowmo/Repositories/teili/teili/models/builder/synapse_equation_builder.py",
				"/home/schlowmo/Repositories/teili/teili/models/neuron_models.py",
				"/home/schlowmo/Repositories/teili/README.md",
				"/home/schlowmo/Repositories/teili/examples/neuron_synapse_test.py",
				"/home/schlowmo/Repositories/teili/teili/models/synapse_models.py",
				"/home/schlowmo/Repositories/teili/teili/__init__.py",
				"/home/schlowmo/Repositories/teili/teili/building_blocks/reservoir.py",
				"/home/schlowmo/Repositories/teili/docs/scripts/Tutorials.md",
				"/home/schlowmo/Repositories/teili/docs/scripts/Core.md",
				"/home/schlowmo/Repositories/teili/teili/models/equations/DPI.py",
				"/home/schlowmo/Repositories/teili/examples/mismatch_example.py",
				"/home/schlowmo/.bashrc",
				"/home/schlowmo/Repositories/OCTA/octa/interfaces/ctxctl_SSV.py",
				"/home/schlowmo/Repositories/teili/teili/models/equations/DPISyn.py",
				"/home/schlowmo/Repositories/teili/teili/models/builder/templates/synapse_templates.py",
				"/home/schlowmo/Repositories/OCTA/octa/tools/old_code.py",
				"/home/schlowmo/Repositories/cortexcontrol/NeuronNeuronConnector.py",
				"/home/schlowmo/Repositories/cortexcontrol/PyCtxUtils.py",
				"/home/schlowmo/Repositories/teili/examples/stdp_test.py",
				"/home/schlowmo/Repositories/OCTA/octa/interfaces/lock_and_load.py",
				"/home/schlowmo/Repositories/OCTA/octa/dynap_octa.py",
				"/home/schlowmo/Repositories/teili/teili/tools/indexing.py",
				"/home/schlowmo/Repositories/teili/teili/tools/converter.py",
				"/home/schlowmo/Repositories/teili/teili/core/groups.py",
				"/home/schlowmo/Repositories/teili/teili/tools/quantize_weights.py",
				"/home/schlowmo/Repositories/teili/teili/tools/random_sampling.py",
				"/home/schlowmo/Repositories/teili/teili/tools/distance.py",
				"/home/schlowmo/Repositories/teili/teili/tools/synaptic_kernel.py",
				"/home/schlowmo/Repositories/cortexcontrol/octa.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPI_at.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPI.py",
				"/home/schlowmo/Repositories/teili/teili/models/parameters/dpi_neuron_param.py",
				"/home/schlowmo/Repositories/OCTA/examples/stdgm_kernel_test.py",
				"/home/schlowmo/Repositories/teili/teili/tools/stimulus_generators.py",
				"/home/schlowmo/Repositories/teili/teili/tools/misc.py",
				"/home/schlowmo/Repositories/OCTA/neuron_equation_builder.py",
				"/home/schlowmo/.bash_aliases",
				"/home/schlowmo/Repositories/cortexcontrol/ctxctl_SSV.py",
				"/home/schlowmo/ownCloud/Documents/Studies/PostDoc/Application/October/Morit_Milde_Purpose_description.tex",
				"/home/schlowmo/Repositories/OCTA/examples/stdgm_test.py",
				"/home/schlowmo/Repositories/OCTA/octa/models/equations/DPISyn_gm.py",
				"/home/schlowmo/.local/lib/python3.5/site-packages/teili-0.2-py3.5.egg/teili/core/groups.py",
				"/home/schlowmo/Repositories/teili/teili/models/equations/DoubleExponential.py",
				"/home/schlowmo/Downloads/lol.py",
				"/home/schlowmo/Repositories/teili/tests/test_testbench.py",
				"/home/schlowmo/Repositories/teili/tests/test_groups.py",
				"/home/schlowmo/Repositories/teili/tests/test_wta.py",
				"/home/schlowmo/Repositories/teili/tests/test_equations_long.py",
				"/usr/local/lib/python3.5/dist-packages/pyqtgraph/__init__.py",
				"/home/schlowmo/Repositories/teili/unit_tests/test_equations_long.py",
				"/home/schlowmo/Repositories/teili/tests/test_equations.py",
				"/home/schlowmo/Repositories/teili/tests/test_tools.py",
				"/home/schlowmo/Repositories/teili/.git/hooks/pre-push",
				"/home/schlowmo/Repositories/OCTA/octa/tools/weight_matrix_visualization.py",
				"/home/schlowmo/Repositories/teili/examples/neuron_synapse_subgroup_test.py",
				"/home/schlowmo/Repositories/ncs_brian/equations/dpi_syn_eq.py",
				"/home/schlowmo/Repositories/ncs_brian/equations/dpi_shunt_syn_eq.py",
				"/home/schlowmo/Repositories/OCTA/octa.py",
				"/home/schlowmo/Repositories/OCTA/setup.py",
				"/home/schlowmo/Repositories/ncs_brian/equations/dpi_neuron_eq.py",
				"/home/schlowmo/Repositories/ncs_brian/equations/dpi_lin_syn_eq.py",
				"/home/schlowmo/Repositories/ncs_brian/equations/dynapse_eq.py",
				"/home/schlowmo/Repositories/ncs_brian/linneuron_eq.py",
				"/home/schlowmo/Documents/spp/tests.py",
				"/home/schlowmo/Documents/spp.py",
				"/home/schlowmo/Documents/spp/vector.py",
				"/home/schlowmo/Documents/spp/starbuzz.py",
				"/home/schlowmo/Documents/spp/kmeans.py",
				"/home/schlowmo/Repositories/dot-files/install_packages.sh",
				"/home/schlowmo/Repositories/teili/docs/scripts/Equation builder.md",
				"/home/schlowmo/Repositories/teili/docs/scripts/Building Blocks.md",
				"/home/schlowmo/Repositories/teili/docs/conf.py",
				"/home/schlowmo/Repositories/teili/requirements.txt",
				"/home/schlowmo/Repositories/teili/tools/sorting.py",
				"/home/schlowmo/Repositories/teili/tools/converter.py",
				"/home/schlowmo/Repositories/teili/tools/distance.py",
				"/home/schlowmo/Repositories/teili/building_blocks/wta.py",
				"/home/schlowmo/Repositories/teili/core/groups.py",
				"/home/schlowmo/Repositories/teili/stimuli/testbench.py"
			],
			"find":
			{
				"height": 24.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					" ,",
					" : ",
					"':",
					"0.5 * pA",
					"CtxDynapse",
					"FpgaSpikeEvent",
					"buffer_pointer",
					"Iahpmax",
					"w_plast",
					"self.parameters",
					"Ipred_plast",
					"w_plast",
					"Ipred",
					"w_plast",
					"Ipred_pre",
					"    >>> neuron_obj",
					"    >>> syn_obj",
					"w_mean",
					"w_std",
					"reinit_threshold",
					"w_std_re_init",
					"w_std_init",
					"w_std",
					"syn_obj",
					"n2dNeurons",
					"ncols",
					"ind2xy",
					"wPlast",
					"get",
					"p_InhWTA",
					"p_WTAInh",
					"I_connection_probability",
					"layerSize",
					"predictionUnits",
					"errorStyle",
					"tileID",
					"contextFanIn",
					"totalNumberTiles",
					"tileNumberY",
					"tileNumberX",
					"tileSizeY",
					"tileSizeX",
					"strideSizeX",
					"strideSizeY",
					"strideSizeX",
					"win",
					"Description",
					"component",
					"namespace"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 1,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/schlowmo/ownCloud/Documents/General/Mobility/cancellation.tex",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1627,
								"regions":
								{
								},
								"selection":
								[
									[
										704,
										704
									]
								],
								"settings":
								{
									"c_time":
									[
										128,
										3,
										99,
										100,
										97,
										116,
										101,
										116,
										105,
										109,
										101,
										10,
										100,
										97,
										116,
										101,
										116,
										105,
										109,
										101,
										10,
										113,
										0,
										67,
										10,
										7,
										227,
										8,
										7,
										13,
										48,
										23,
										10,
										243,
										99,
										113,
										1,
										133,
										113,
										2,
										82,
										113,
										3,
										46
									],
									"syntax": "Packages/LaTeX/LaTeX.sublime-syntax",
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"_vintageous_non_interactive": false,
										"_vintageous_processing_notation": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 18
									}
								},
								"translation.x": 0.0,
								"translation.y": 230.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/schlowmo/Documents/test_scripts/ORCA Compiler.py",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 8135,
								"regions":
								{
								},
								"selection":
								[
									[
										7671,
										7671
									]
								],
								"settings":
								{
									"auto_name": "import os, time",
									"c_time":
									[
										128,
										3,
										99,
										100,
										97,
										116,
										101,
										116,
										105,
										109,
										101,
										10,
										100,
										97,
										116,
										101,
										116,
										105,
										109,
										101,
										10,
										113,
										0,
										67,
										10,
										7,
										227,
										9,
										12,
										13,
										42,
										41,
										0,
										143,
										184,
										113,
										1,
										133,
										113,
										2,
										82,
										113,
										3,
										46
									],
									"syntax": "Packages/Python/Python.sublime-syntax",
									"tab_size": 4,
									"translate_tabs_to_spaces": true,
									"vintage":
									{
										"_vintageous_glue_until_normal_mode": false,
										"action": null,
										"action_count": "",
										"mode": "mode_normal",
										"motion": null,
										"motion_count": "",
										"must_capture_register_name": false,
										"normal_insert_count": "1",
										"partial_sequence": "",
										"register": "\"",
										"sequence": "",
										"xpos": 17
									}
								},
								"translation.x": 0.0,
								"translation.y": 513.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 24.0
			},
			"input":
			{
				"height": 74.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 376.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.latextools":
			{
				"height": 250.0
			},
			"output.markdown":
			{
				"height": 170.0
			},
			"output.unsaved_changes":
			{
				"height": 170.0
			},
			"output.vi_out":
			{
				"height": 96.0
			},
			"pinned_build_system": "",
			"position": "0,1,0,0,0,23,15,1003,1469,2550,1980",
			"project": "",
			"replace":
			{
				"height": 44.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 380.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"",
						"mon_addr"
					]
				],
				"width": 392.0
			},
			"selected_group": 0,
			"settings":
			{
				"_vintageous_last_buffer_search": "include",
				"_vintageous_last_buffer_search_command": "vi_slash",
				"_vintageous_last_char_search_command": "vi_big_t",
				"_vintageous_last_character_search": "d",
				"_vintageous_reset_during_init": true,
				"vintage":
				{
					"_cmdline_cd": "/home/schlowmo/ownCloud/Documents/General/Mobility"
				}
			},
			"show_minimap": false,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": false,
			"side_bar_width": 191.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 39,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
